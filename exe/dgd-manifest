#!/usr/bin/env ruby

require "dgd-tools/manifest"

if ARGV.size == 0
    ARGV.push "install"
end

if ARGV == ["--version"]
    puts "dgd-tools version #{DGD::VERSION}"
    exit
end

if ARGV.size == 1 && ["-h", "--help"].include?(ARGV[0])
    puts <<HELP_INFO
dgd-manifest commands:

new [project_name]: create a new DGD-manifest project
test: make sure the dgd.manifest file is well-formed and usable
install: compile the DGD application to a config file and a root directory
HELP_INFO
    exit
end

case ARGV[0]
when "new"
    unless ARGV.size == 2
        puts "Usage: dgd-manifest new [project name]"
        raise "Must supply exactly one argument to dgd-manifest new!"
    end
    appdir = DGD::Manifest::AppDirectory.new(File.expand_path ARGV[1])
    appdir.name = ARGV[1]
    appdir.create!
when "test"
    unless File.exist?("dgd.manifest")
        raise "I don't see a dgd.manifest file in this directory!"
    end
    puts "Running dgd.manifest installer..."
    repo = DGD::Manifest::Repo.new
    repo.manifest_file("dgd.manifest")
    repo.precheck(".")
    puts "Verified Manifest packages: this looks likely correct."
when "install"
    unless File.exist?("dgd.manifest")
        raise "I don't see a dgd.manifest file in this directory!"
    end
    puts "Running DGD Manifest installer..."
    repo = DGD::Manifest::Repo.new
    repo.manifest_file("dgd.manifest")
    current_dir = File.expand_path(".")
    repo.precheck(current_dir)
    repo.assemble_app(current_dir)
    puts "Assembled DGD application into #{current_dir}"
when "update"
    unless File.exist?("dgd.manifest")
        raise "I don't see a dgd.manifest file in this directory!"
    end
    puts "Running DGD Manifest installer..."
    repo = DGD::Manifest::Repo.new
    repo.manifest_file("dgd.manifest")
    current_dir = File.expand_path(".")
    repo.precheck(current_dir)
    repo.update_app(current_dir)
    puts "Updated DGD application in #{current_dir}"
when "server"
    puts "Starting DGD server..."
    DGD::Manifest.system_call("~/.dgd-tools/dgd/bin/dgd dgd.config")
else
    raise "Unrecognised #{$0} command: #{ARGV[0].inspect}!"
end
